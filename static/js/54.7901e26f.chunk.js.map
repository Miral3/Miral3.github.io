{"version":3,"sources":["views/Algorithm/Java/ClassMaker.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"names":["Users","useState","users","setUsers","loading","setLoading","error","setError","fetchUsers","a","axios","get","response","data","useEffect","map","user","key","id","username","name","onClick","_arrayLikeToArray","arr","len","length","i","arr2","Array","_slicedToArray","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","o","minLen","n","prototype","toString","call","slice","constructor","from","test","TypeError"],"mappings":"mLAmiBeA,UA3Cf,WAAkB,IAAD,EACWC,mBAAS,MADpB,mBACRC,EADQ,KACDC,EADC,OAEeF,oBAAS,GAFxB,mBAERG,EAFQ,KAECC,EAFD,OAGWJ,mBAAS,MAHpB,mBAGRK,EAHQ,KAGDC,EAHC,KAKTC,EAAU,uCAAG,4BAAAC,EAAA,sEAGfF,EAAS,MACTJ,EAAS,MAETE,GAAW,GANI,SAOQK,IAAMC,IAC3B,8CARa,OAOTC,EAPS,OAUfT,EAASS,EAASC,MAVH,kDAYfN,EAAS,EAAD,IAZO,QAcjBF,GAAW,GAdM,0DAAH,qDAqBhB,OAJAS,qBAAU,WACRN,MACC,IAECJ,EAAgB,qDAChBE,EAAc,wFACbJ,EAEH,oCACE,4BACGA,EAAMa,KAAI,SAAAC,GAAI,OACb,wBAAIC,IAAKD,EAAKE,IACXF,EAAKG,SADR,KACoBH,EAAKI,KADzB,SAKJ,4BAAQC,QAASb,GAAjB,0CAVe,O,iCCphBN,SAASc,EAAkBC,EAAKC,IAClC,MAAPA,GAAeA,EAAMD,EAAIE,UAAQD,EAAMD,EAAIE,QAE/C,IAAK,IAAIC,EAAI,EAAGC,EAAO,IAAIC,MAAMJ,GAAME,EAAIF,EAAKE,IAC9CC,EAAKD,GAAKH,EAAIG,GAGhB,OAAOC,ECHM,SAASE,EAAeN,EAAKG,GAC1C,OCLa,SAAyBH,GACtC,GAAIK,MAAME,QAAQP,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKG,GACjD,GAAsB,qBAAXK,QAA4BA,OAAOC,YAAYC,OAAOV,GAAjE,CACA,IAAIW,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKjB,EAAIQ,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAETlB,GAAKQ,EAAKT,SAAWC,GAH8CS,GAAK,IAK9E,MAAOU,GACPT,GAAK,EACLC,EAAKQ,EACL,QACA,IACOV,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBX,EAAKG,IGJ3C,SAAqCoB,EAAGC,GACrD,GAAKD,EAAL,CACA,GAAiB,kBAANA,EAAgB,OAAO,EAAiBA,EAAGC,GACtD,IAAIC,EAAIf,OAAOgB,UAAUC,SAASC,KAAKL,GAAGM,MAAM,GAAI,GAEpD,MADU,WAANJ,GAAkBF,EAAEO,cAAaL,EAAIF,EAAEO,YAAYjC,MAC7C,QAAN4B,GAAqB,QAANA,EAAoBpB,MAAM0B,KAAKN,GACxC,cAANA,GAAqB,2CAA2CO,KAAKP,GAAW,EAAiBF,EAAGC,QAAxG,GHF8D,CAA2BxB,EAAKG,IILjF,WACb,MAAM,IAAI8B,UAAU,6IJIgF,G","file":"static/js/54.7901e26f.chunk.js","sourcesContent":["// import React, { Component } from 'react';\n// import { Col, Input, Row, ListGroup, ListGroupItem, Card, CardBody, CardHeader, FormGroup, Label, Form, Button } from 'reactstrap';\n\n// class CompatorMaker extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       className: \"\",\n//       fieldNum: 1,\n//       field: [\"arg\"],\n//       getter: [false],\n//       setter: [false],\n//       result: \"\",\n//       constructorNum: 0,\n//       constructorField: [[false]],\n//       sortCdt: false,\n//       sortPriority: [\"\"],\n//       isAscending: [true],\n//       priorityNum: 0,\n//     };\n//   };\n\n//   handleClassName = (e) => {\n//     this.setState({\n//       className: e.target.value,\n//     })\n//   };\n\n//   handleFieldNum = (e) => {\n//     let value = parseInt(e.target.value);\n//     console.log(\"isFirst?\")\n//     this.setState({\n//       fieldNum: value,\n//       field: new Array(value).fill(\"arg\"), // TODO 기존 값 채워두고 필드 갯수를 바꾸면 arg로 채워지는 버그 있음\n//       getter: new Array(value).fill(false),\n//       setter: new Array(value).fill(false)\n//     })\n//   };\n\n//   handleConstructorNum = (e) => {\n//     let value = parseInt(e.target.value);\n//     var arr = new Array(value);\n//     for (var i = 0; i < arr.length; i++) {\n//       arr[i] = new Array(value).fill(false);\n//     }\n//     this.setState({\n//       constructorNum: value,\n//       constructorField: arr\n//     })\n//   };\n\n//   handleConstructorCBox = (e) => {\n//     let constructorField = this.state.constructorField;\n//     constructorField[e.target.dataset.index][e.target.name] = e.target.checked;\n//     this.setState({\n//       constructorField: constructorField\n//     });\n//   };\n\n//   handleRadio = (e) => {\n//     this.setState({\n//       argumentNum: e.target.value,\n//     })\n//   }\n\n//   handleSortCdt = (e) => {\n//     this.setState({\n//       sortCdt: e.target.checked,\n//       sortPriority: new Array(this.state.fieldNum).fill(\"\"),\n//       isAscending: new Array(this.state.fieldNum).fill(true)\n//     });\n//   };\n\n//   handleArgsInput = (e) => {\n//     let field = this.state.field;\n//     field[e.target.dataset.index] = e.target.value.trim().split(\";\")[0];\n//     this.setState({\n//       field: field,\n//     });\n//   };\n\n//   handleDummy = (e) => {\n//     // onChange가 없으면 warning 발생\n//   };\n\n//   handleCheckBox = (e) => {\n//     let getter = this.state.getter;\n//     let setter = this.state.setter;\n//     let index = e.target.dataset.index;\n//     let isGetter = (e.target.name === \"getter\") ? true : false;\n//     if (isGetter) {\n//       getter[index] = e.target.checked;\n//     } else {\n//       setter[index] = e.target.checked;\n//     }\n//     this.setState({\n//       getter: getter,\n//       setter: setter\n//     });\n//   }\n\n//   handlePriority = (e) => {\n//     let index = e.target.dataset.index;\n//     let priorityNum = this.state.priorityNum;\n//     let sortPriority = this.state.sortPriority;\n//     if (e.target.checked) {\n//       sortPriority[priorityNum] = index;\n//       priorityNum++;\n//     } else {\n//       sortPriority.splice(sortPriority.indexOf(index), 1);\n//       priorityNum--;\n//     }\n//     this.setState({\n//       sortPriority: sortPriority,\n//       priorityNum: priorityNum\n//     })\n//   }\n\n//   handleIsAscend = (e) => {\n//     let isAscending = this.state.isAscending;\n//     let index = e.target.dataset.index;\n//     if (e.target.value === \"ascending\") {\n//       isAscending[index] = true;\n//     } else {\n//       isAscending[index] = false;\n//     }\n//     this.setState({\n//       isAscending: isAscending\n//     })\n//   }\n\n//   copy() {\n//     var t = document.createElement(\"textarea\");\n//     document.body.appendChild(t);\n//     t.value = this.state.result;\n//     t.select();\n//     document.execCommand('copy');\n//     document.body.removeChild(t);\n//     alert(\"복사 완료!\");\n//   }\n\n//   makeFieldsInput() {\n//     let fieldNum = this.state.fieldNum;\n//     let arr = [];\n//     let exampleField = [\"int a\", \"int b\", \"int c\", \"int d\", \"int e\", \"int f\", \"int g\", \"int h\", \"int i\", \"int j\"];\n//     for (let i = 0; i < fieldNum; i++) {\n//       arr.push(i + 1);\n//     }\n//     return (\n//       <div>\n//         {arr.map((txt, index) => (\n//           txt === \"\" ? <br key={index} /> : (\n//             <div key={index}>\n//               <FormGroup row>\n//                 <Col md=\"3\">\n//                   <Label htmlFor=\"text-input\">{txt}번째 필드</Label>\n//                 </Col>\n//                 <Col xs=\"12\" md=\"9\">\n//                   <Input type=\"text\" id={\"field\" + index} name={\"field\" + index} data-index={index} onChange={this.handleArgsInput} placeholder={exampleField[index]} />\n//                 </Col>\n//               </FormGroup>\n//               <FormGroup row>\n//                 <Col md=\"3\">\n//                 </Col>\n//                 <Col md=\"9\">\n//                   <FormGroup check inline>\n//                     <Input className=\"form-check-input\" type=\"checkbox\" id={\"getter\" + index} name=\"getter\" data-index={index} value={index} onChange={this.handleCheckBox} />\n//                     <Label className=\"form-check-label\" check htmlFor=\"inline-checkbox1\">Getter</Label>\n//                   </FormGroup>\n//                   <FormGroup check inline>\n//                     <Input className=\"form-check-input\" type=\"checkbox\" id={\"setter\" + index} name=\"setter\" data-index={index} value={index} onChange={this.handleCheckBox} />\n//                     <Label className=\"form-check-label\" check htmlFor=\"inline-checkbox2\">Setter</Label>\n//                   </FormGroup>\n//                 </Col>\n//               </FormGroup>\n//             </div>\n//           )\n//         ))}\n//       </div>\n//     )\n//   }\n\n//   makeConstructorNumInput() {\n//     let fieldNum = this.state.fieldNum + 1;\n//     let arr = new Array(fieldNum).fill(0);\n//     return (\n//       <FormGroup row>\n//         <Col md=\"3\">\n//           <Label htmlFor=\"text-input\">생성자 개수</Label>\n//         </Col>\n//         <Col xs=\"12\" md=\"9\">\n//           <Input type=\"select\" name=\"constructor_num_input\" id=\"constructor_num_input\" onChange={this.handleConstructorNum} >\n//             {arr.map((txt, index) => (\n//               txt === \"\" ? <br key={index} /> : (\n//                 <option value={index} key={index}>{index}</option>\n//               )\n//             ))}\n//           </Input>\n//         </Col>\n//       </FormGroup>\n//     )\n//   }\n\n//   makeConstructorInput() {\n//     let field = this.state.field;\n//     let constructorNum = this.state.constructorNum;\n//     let arr = new Array(constructorNum).fill(1)\n//     return (\n//       <div>\n//         {arr.map((t, index) => (\n//           <FormGroup row key={index}>\n//             <Col md=\"3\">\n//               <Label htmlFor=\"text-input\">{index + 1}번 생성자 인자 선택</Label>\n//             </Col>\n//             <Col md=\"9\">\n//               {field.map((txt, fieldIdx) => (\n//                 <FormGroup check inline key={fieldIdx}>\n//                   <Input className=\"form-check-input\" type=\"checkbox\" id={index + \"\" + fieldIdx} name={fieldIdx} data-index={index} value={fieldIdx} onChange={this.handleConstructorCBox} />\n//                   <Label className=\"form-check-label\" check htmlFor=\"inline-checkbox1\">{txt}</Label>\n//                 </FormGroup>\n//               ))}\n//             </Col>\n//           </FormGroup>\n//         ))}\n//       </div>\n//     )\n//   }\n\n//   makeSortedCondition() {\n//     if (this.state.sortCdt) {\n//       let sortPriority = this.state.sortPriority;\n//       let priorityNum = this.state.priorityNum;\n//       let loop = new Array(priorityNum).fill(0);\n//       let field = this.state.field;\n//       let isAscending = this.state.isAscending;\n//       return (\n//         <FormGroup row>\n//           <Col md=\"3\">\n//             <Label htmlFor=\"text-input\">우선순위 선택</Label>\n//           </Col>\n//           <Col md=\"9\">\n//             {field.map((txt, idx) => (\n//               <FormGroup check inline key={idx}>\n//                 <Input className=\"form-check-input\" type=\"checkbox\" id={idx} name={idx} data-index={idx} value={idx} onChange={this.handlePriority} />\n//                 <Label className=\"form-check-label\" check htmlFor=\"inline-checkbox1\">{txt}</Label>\n//               </FormGroup>\n//             ))}\n//           </Col>\n//           <Col md=\"3\"></Col><Col md=\"9\">원하는 순서대로 체크를 눌러주세요.</Col>\n//           <Col md=\"3\"></Col><Col md=\"9\">\n//             {loop.map((txt, idx) => (\n//               <div key={idx}><div>{idx + 1 + \"번째 : \" + field[sortPriority[idx]]}</div>\n//                 <FormGroup row>\n//                   <Col>\n//                     <FormGroup check inline>\n//                       <Input className=\"form-check-input\" type=\"radio\" id={\"isAs\" + idx} data-index={idx} name={\"ad\" + idx} value=\"ascending\" checked={isAscending[idx]} onChange={this.handleIsAscend} />\n//                       <Label className=\"form-check-label\" check htmlFor=\"inline-radio1\">오름차순</Label>\n//                     </FormGroup>\n//                     <FormGroup check inline>\n//                       <Input className=\"form-check-input\" type=\"radio\" id={\"isDs\" + idx} data-index={idx} name={\"ad\" + idx} value=\"descending\" checked={!isAscending[idx]} onChange={this.handleIsAscend} />\n//                       <Label className=\"form-check-label\" check htmlFor=\"inline-radio2\">내림차순</Label>\n//                     </FormGroup>\n//                   </Col>\n//                 </FormGroup>\n//               </div>\n//             ))}\n//           </Col>\n//         </FormGroup>\n//       )\n//     } else {\n//       return \"\";\n//     }\n\n//   }\n\n//   printResult() {\n//     return (\n//       <Col>\n//         <ListGroup>\n//           <ListGroupItem key=\"result\" active tag=\"button\" action>result</ListGroupItem>\n//           <ListGroupItem key=\"copy\" tag=\"button\" action color=\"success\" onClick={() => this.copy()} onDoubleClick={() => this.copy()}>{this.state.result}</ListGroupItem>\n//         </ListGroup>\n//       </Col>\n//     )\n//   }\n\n//   makeClass() {\n//     let sortCdt = this.state.sortCdt;\n//     let className = this.state.className;\n//     let result = \"class \" + className + (sortCdt ? \" implements Comparable<\" + className + \"> {\\n\" : \" {\\n\");\n//     let field = this.state.field;\n//     let fieldNames = new Array(field.length);\n//     let fieldTypes = new Array(field.length);\n//     let getter = this.state.getter;\n//     let setter = this.state.setter;\n//     let constructorNum = this.state.constructorNum;\n//     let constructorField = this.state.constructorField;\n//     let fieldNum = this.state.fieldNum;\n//     let sortPriority = this.state.sortPriority;\n//     let priorityNum = this.state.priorityNum;\n//     let isAscending = this.state.isAscending;\n//     console.log(isAscending)\n//     for (let i = 0; i < field.length; i++) {\n//       let split = field[i].split(\" \");\n//       if (split.length !== 2) {\n//         alert((i + 1) + \"번째 필드의 입력이 올바르지 않습니다.\");\n//         return;\n//       }\n//       fieldTypes[i] = split[0];\n//       fieldNames[i] = split[1];\n//       result += \"\\tprivate \" + field[i] + \";\\n\";\n//     }\n//     result += \"\\n\";\n//     for (let i = 0; i < getter.length; i++) {\n//       if (getter[i]) {\n//         let toCamelCase = fieldNames[i].charAt(0).toUpperCase() + fieldNames[i].substr(1);\n//         result += \"\\tpublic \" + fieldTypes[i] + \" get\" + toCamelCase + \"() {\\n\\t\\treturn \" + fieldNames[i] + \";\\n\\t}\\n\";\n//       }\n//     }\n//     for (let i = 0; i < setter.length; i++) {\n//       if (setter[i]) {\n//         let toCamelCase = fieldNames[i].charAt(0).toUpperCase() + fieldNames[i].substr(1);\n//         result += \"\\tpublic void set\" + toCamelCase + \"(\" + field[i] + \") {\\n\\t\\tthis.\" + fieldNames[i] + \" = \" + fieldNames[i] + \";\\n\\t}\\n\";\n//       }\n//     }\n//     for (let i = 0; i < constructorNum; i++) {\n//       result += \"\\tpublic \" + className + \"(\";\n//       for (let j = 0; j < fieldNum; j++) {\n//         if (constructorField[i][j]) {\n//           result += field[j];\n//           if (j !== fieldNum - 1) {\n//             result += \", \";\n//           }\n//         }\n//       }\n//       result += \") {\\n\";\n//       for (let j = 0; j < fieldNum; j++) {\n//         if (constructorField[i][j]) {\n//           result += \"\\t\\tthis.\" + fieldNames[j] + \" = \" + fieldNames[j] + \";\\n\";\n//         }\n//       }\n//       result += \"\\t}\\n\"\n//     }\n//     if (sortCdt) {\n//       result += \"\\t@Override\\n\\tpublic int compareTo(\" + className + \" o) {\\n\"\n//       result += this.makeCompareToCode(0, sortPriority, isAscending, priorityNum, fieldNames, fieldTypes, 2);\n//       result += \"\\t}\\n\"\n//     }\n//     result += \"}\";\n\n//     this.setState({\n//       result: result,\n//     });\n//   }\n\n//   makeCompareToCode(idx, sortPriority, isAscending, priorityNum, fieldNames, fieldTypes, tabCount) {\n//     let result = \"\";\n//     if (idx !== priorityNum - 1) {\n//       let name = fieldNames[sortPriority[idx]];\n//       let type = fieldTypes[sortPriority[idx]];\n//       let getMethod = \"o.get\" + name.charAt(0).toUpperCase() + name.substr(1) + \"()\";\n//       let thisName = \"this.\" + name;\n//       if (type !== \"String\") {\n//         result += this.makeTabs(tabCount) + \"if (\" + thisName + \" < \" + getMethod + \") {\\n\";\n//         result += this.makeTabs(tabCount + 1) + \"return \" + (isAscending[idx] ? \"-1\" : \"1\") + \";\\n\";\n//         result += this.makeTabs(tabCount) + \"else if (\" + thisName + \" == \" + getMethod + \") {\\n\";\n//         result += this.makeCompareToCode(idx + 1, sortPriority, isAscending, priorityNum, fieldNames, fieldTypes, tabCount + 1);\n//         result += this.makeTabs(tabCount) + \"else {\\n\";\n//         result += this.makeTabs(tabCount + 1) + \"return \" + (isAscending[idx] ? \"1\" : \"-1\") + \";\\n\" + this.makeTabs(tabCount) + \"}\\n\";\n//       }\n//     } else if (idx === priorityNum - 1) {\n//       let name = fieldNames[sortPriority[idx]];\n//       let type = fieldTypes[sortPriority[idx]];\n//       let getMethod = \"o.get\" + name.charAt(0).toUpperCase() + name.substr(1) + \"()\";\n//       let thisName = \"this.\" + name;\n//       let compare = isAscending[idx] ? thisName + \", \" + getMethod : getMethod + \", \" + thisName;\n//       result+=this.makeTabs(tabCount);\n//       switch (type) {\n//         case \"int\":\n//         case \"Integer\":\n//           result += \"return Integer.compare(\" + compare + \");\\n\";\n//           break;\n//         case \"byte\":\n//         case \"Byte\":\n//           result += \"return Byte.compare(\" + compare + \");\\n\";\n//           break;\n//         case \"short\":\n//         case \"Short\":\n//           result += \"return Short.compare(\" + compare + \");\\n\";\n//           break;\n//         case \"long\":\n//         case \"Long\":\n//           result += \"return Long.compare(\" + compare + \");\\n\";\n//           break;\n//         case \"float\":\n//         case \"Float\":\n//           result += \"return Float.compare(\" + compare + \");\\n\";\n//           break;\n//         case \"double\":\n//         case \"Double\":\n//           result += \"return Double.compare(\" + compare + \");\\n\";\n//           break;\n//         case \"char\":\n//         case \"Character\":\n//           result += \"return Character.compare(\" + compare + \");\\n\";\n//           break;\n//         case \"boolean\":\n//         case \"Boolean\":\n//           result += \"return Boolean.compare(\" + compare + \");\\n\";\n//           break;\n//         case \"String\":\n//           result += \"return String.\" + isAscending[idx] ? thisName + \".compareTo(\" + getMethod + \");\\n\" : getMethod + \".compareTo(\" + thisName + \");\\n\";\n//           break;\n//         default:\n//       }\n//     }\n//     return result;\n//   }\n\n//   makeTabs(tabCount) {\n//     let tabs = \"\";\n//     for (let i = 0; i < tabCount; i++) {\n//       tabs += \"\\t\";\n//     }\n//     return tabs;\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Row>\n//           <Col>\n//             <Card>\n//               <CardHeader>\n//                 <strong>Class Info</strong>\n//               </CardHeader>\n//               <CardBody>\n//                 <Form action=\"\" method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\n//                   <FormGroup row>\n//                     <Col md=\"3\">\n//                       <Label htmlFor=\"text-input\">Class Name</Label>\n//                     </Col>\n//                     <Col xs=\"12\" md=\"9\">\n//                       <Input type=\"text\" id=\"class_name_input\" name=\"class_name_input\" placeholder=\"Name\" onChange={this.handleClassName} />\n//                     </Col>\n//                   </FormGroup>\n//                   <FormGroup row>\n//                     <Col md=\"3\">\n//                       <Label htmlFor=\"text-input\">필드 개수</Label>\n//                     </Col>\n//                     <Col xs=\"12\" md=\"9\">\n//                       <Input type=\"select\" name=\"field_num_input\" id=\"field_num_input\" onChange={this.handleFieldNum} >\n//                         <option value=\"1\">1</option>\n//                         <option value=\"2\">2</option>\n//                         <option value=\"3\">3</option>\n//                         <option value=\"4\">4</option>\n//                         <option value=\"5\">5</option>\n//                         <option value=\"6\">6</option>\n//                         <option value=\"7\">7</option>\n//                         <option value=\"8\">8</option>\n//                         <option value=\"9\">9</option>\n//                         <option value=\"10\">10</option>\n//                       </Input>\n//                     </Col>\n//                   </FormGroup>\n//                   {this.makeFieldsInput()}\n//                   {this.makeConstructorNumInput()}\n//                   {this.makeConstructorInput()}\n//                   <FormGroup row>\n//                     <Col>\n//                       <FormGroup check inline>\n//                         <Input className=\"form-check-input\" type=\"checkbox\" id=\"isCompareTo\" name=\"getter\" value=\"isCompareTo\" onChange={this.handleSortCdt} />\n//                         <Label className=\"form-check-label\" check htmlFor=\"inline-checkbox1\">정렬 조건 생성 (implements Comparable)</Label>\n//                       </FormGroup>\n//                     </Col>\n//                   </FormGroup>\n//                   {this.makeSortedCondition()}\n//                   <Button onClick={() => this.makeClass()}>Create!</Button>\n//                 </Form>\n//               </CardBody>\n//             </Card>\n//           </Col>\n//           <Col>\n//             <Card>\n//               <CardHeader>\n//                 <strong>Result</strong>\n//               </CardHeader>\n//               <CardBody>\n//                 <Input type=\"textarea\" value={this.state.result} rows=\"20\" onChange={this.handleDummy}></Input>\n//                 <Button onClick={() => this.copy()}>클립보드에 복사</Button>\n//               </CardBody>\n//             </Card>\n//           </Col>\n//         </Row>\n//       </div>\n//     );\n//   }\n// }\n\n// export default CompatorMaker;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction Users() {\n  const [users, setUsers] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchUsers = async () => {\n    try {\n      // 요청이 시작 할 때에는 error 와 users 를 초기화하고\n      setError(null);\n      setUsers(null);\n      // loading 상태를 true 로 바꿉니다.\n      setLoading(true);\n      const response = await axios.get(\n        'https://jsonplaceholder.typicode.com/users'\n      );\n      setUsers(response.data); // 데이터는 response.data 안에 들어있습니다.\n    } catch (e) {\n      setError(e);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  if (loading) return <div>로딩중..</div>;\n  if (error) return <div>에러가 발생했습니다</div>;\n  if (!users) return null;\n  return (\n    <>\n      <ul>\n        {users.map(user => (\n          <li key={user.id}>\n            {user.username} ({user.name})\n          </li>\n        ))}\n      </ul>\n      <button onClick={fetchUsers}>다시 불러오기</button>\n    </>\n  );\n}\n\nexport default Users;","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}